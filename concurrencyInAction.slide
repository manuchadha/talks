Concurrency In Action

18 Jan 2017

Manu Chadha
manu.chadha87@gmail.com

https://github.com/manuchadha/talks

References:

http://talks.golang.org/2012/concurrency.slide
https://github.com/golang/go/wiki/LearnConcurrency
https://blog.golang.org/pipelines
http://www.slideshare.net/jgrahamc/go-oncurrency
https://blog.golang.org/advanced-go-concurrency-patterns


* Concurrency fundamentals in Go
- Goroutines:
  - Very lightweight processes
  - Starting 10,000 goroutines on my MacBook Pro took 22ms
  - All scheduling handled internally by the Go runtime
  - Unless you are CPU bound you do not have to think about scheduling
- Channel-based communication:
  - The right way for goroutines to talk to each other
- Multi-Way concurrency control
  - Select

* Concurrency Vs Parallelism

Concurrency is not Parallelism!!

- *Concurrency*: Programming as the composition of independently executing processes.

- *Parallelism*: Programming as the simultaneous execution of (possibly related) computations.

So Concurrency is about dealing with lots of things at once.Parallelism is about doing lot of things at once.

Do refer -https://www.youtube.com/watch?v=cN_DpYBzKso&t=784s

* Without Goroutines

.play concurrencyInAction/no-go.go


* Goroutines

A goroutine is a function that is capable of running concurrently with other functions. To create a goroutine we use the keyword go followed by a function invocation:

.play concurrency/gopher.go

* Making it work

Let do something in *main* method to stop it from dying before *func* *foo* and *bar* executes

.play concurrency/gopher1.go /START OMIT/,/END OMIT/

* Synchronization

We saw *func* *main* didn't know what *func* *foo* and *bar* was doing.

If it did, it would have not exited before letting *func* *foo* and *bar* finish it's work.

Lets see some better way from letting the program exiting after work.

- Wait Groups
- Semaphore

* Channels: First-class citizens

  You can pass them as function arguments, store in containers, pass via channels, etc.
  Moreover, channels are not tied to goroutines. Several goroutines can send/recv from a single channel. 
  They are a way to provide communication between two goroutines.

.code concurrency/channels.go /INIT OMIT/,/ENDINIT OMIT/

.code concurrency/channels.go /SEND OMIT/,/ENDSEND OMIT/

.code concurrency/channels.go /WAIT OMIT/,/ENDWAIT OMIT/

.code concurrency/channels.go /REC OMIT/,/ENDREC OMIT/

* Channels and Goroutines

Let see how channels works with routines.

.code concurrency/gopher2.go /GOPHER OMIT/,/ENDGOPHER OMIT/

.play concurrency/gopher2.go /MAIN OMIT/,/ENDMAIN OMIT/

* Takeaways

By default, sends and receives block until the other side is ready. 
This allows goroutines to synchronize without explicit locks or condition variables.
The example code sums the numbers in a slice, distributing the work between two goroutines.
Once both goroutines have completed their computation,it calculates the final result

* n-times to 1
  Many no of functions writing to same channel

.play concurrency/gopher3.go /MAIN OMIT/,/ENDMAIN OMIT/

* 1 to n-times
 Many no of functions polling values from the same channel

.play concurrency/gopher33.go /MAIN OMIT/,/ENDMAIN OMIT/

* Some more code

  Pass a channel to function and return a channel from a function

.code concurrency/gopher4.go /GOPHER OMIT/,/ENDGOPHER OMIT/

* ...

.play concurrency/gopher4.go /MAIN OMIT/,/ENDMAIN OMIT/

* Whoever talks first!

The *gopher* instances are executing one after the other. Let's print whoever responds first. We need a mulitplexer.

.code concurrency/gopher5.go /FIRST OMIT/,/ENDFIRST OMIT/

* Whomever talks first!

Now the gopher instance who responds first will print

.code concurrency/gopher5.go /GOPHER OMIT/,/ENDGOPHER OMIT/

.play concurrency/gopher5.go /MAIN OMIT/,/ENDMAIN OMIT/

* Restore order

.code concurrency/gopher6.go /MSG OMIT/,/ENDMSG OMIT/

.code concurrency/gopher6.go /FIRST OMIT/,/ENDFIRST OMIT/

* ...
.code concurrency/gopher6.go /GOPHER OMIT/,/ENDGOPHER OMIT/

.play concurrency/gopher6.go /MAIN OMIT/,/ENDMAIN OMIT/

* Buffered channels

Sends to a buffered channel block only when the buffer is full. Receives block when the buffer is empty.

.play concurrencyInAction/buffered_channels.go /START OMIT/,/END OMIT/

* Select
The select statement provides another way to handle multiple channels. 
It's like a switch, but each case is a communication: 
  - All channels are evaluated. 
  - Selection blocks until one communication can proceed, which then does. 
  - If multiple can proceed, select chooses pseudo-randomly. 
  - A default clause, if present, executes immediately if no channel is ready

.code concurrencyInAction/select.go 

* Timeout using select
  The time.After function returns a channel that blocks for the specified duration. 
  After the interval, the channel delivers the current time, once.

.play concurrencyInAction/timeout.go /START OMIT/,/END OMIT/


* Concurrency Toys!

- UUID Service
- Rate limiter
- Simple Pipeline
- Distributed Pipeline
- Fan IN /Fan Out

* UUID Service

Get a unique id by simply reading from a channel.

.play concurrencyInAction/uuid.go /START OMIT/,/END OMIT/

* Rate limiter

Requests every 200ms.

.code concurrencyInAction/rate_limiter.go /START1 OMIT/,/END1 OMIT/

* Rate limiter

First 3 requests in an immediate burst. Last 3 every second.

.play concurrencyInAction/rate_limiter.go /START2 OMIT/,/END2 OMIT/

* A Simple Pipeline

Stages of work sent downstream.

.code concurrencyInAction/pipelines.go /START1 OMIT/,/END1 OMIT/

* A Simple Pipeline

.code concurrencyInAction/pipelines.go /START2 OMIT/,/END2 OMIT/

* A Simple Pipeline

.play concurrencyInAction/pipelines.go /START3 OMIT/,/END3 OMIT/

* A Distributed Pipeline

Each stage on a separate goroutine and merge the outputs.

.code concurrencyInAction/pipelines_merge.go /START1 OMIT/,/END1 OMIT/

* A Distributed Pipeline

.code concurrencyInAction/pipelines_merge.go /START2 OMIT/,/END2 OMIT/

* A Distributed Pipeline

.play concurrencyInAction/pipelines_merge.go /START3 OMIT/,/END3 OMIT/

* Fan OUT Pattern
 
- Multiple functions reading from the same channel until that channel is closed 

* Fan In Pattern

- A function can read from multiple inputs and proceed until all are closed by
 multiplexing the input channels onto a single channel that's closed when
 all the inputs are closed.
